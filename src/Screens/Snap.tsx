import React, { useState, useEffect, useRef } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  StatusBar,
  SafeAreaView,
  ActivityIndicator,
  Alert,
  Platform,
  Image,
} from "react-native";
import { MaterialIcons, MaterialCommunityIcons } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";
import { NativeStackNavigationProp } from "@react-navigation/native-stack";
import Tabbar from "../Component/Tabbar";
import { CameraView, useCameraPermissions } from "expo-camera";
import { supabase } from "../lib/supabase";
import * as FileSystem from 'expo-file-system';
import * as ImagePicker from 'expo-image-picker';

// Define navigation types
type RootStackParamList = {
  PredictionResult: {
    prediction: any;
    imageUri: string;
  };
  Home: undefined;
  Search: undefined;
  Profile: undefined;
  Snap: undefined;
};

type SnapScreenNavigationProp = NativeStackNavigationProp<RootStackParamList>;

const FASTAPI_URL = "http://10.0.0.48:8000"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á FastAPI backend
const CURRENT_USER_ID = 1;

const SnapScreen: React.FC = () => {
  const navigation = useNavigation<SnapScreenNavigationProp>();
  const [permission, requestPermission] = useCameraPermissions();
  const [isLoading, setIsLoading] = useState(false);
  const [cameraReady, setCameraReady] = useState(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [isUsingGallery, setIsUsingGallery] = useState(false);
  const cameraRef = useRef<CameraView>(null);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permission
  useEffect(() => {
    const checkPermissions = async () => {
      if (!permission) return;
      
      if (!permission.granted) {
        await requestPermission();
      }
    };

    checkPermissions();
  }, [permission, requestPermission]);

  // ‚úÖ Function ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Supabase Storage (‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥)
  const uploadImageToSupabase = async (imageUri: string): Promise<string> => {
    try {
      console.log("üì§ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ Supabase Storage...");

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bucket ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const { data: buckets, error: listError } = await supabase.storage.listBuckets();
      
      if (listError) {
        console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bucket:", listError.message);
        return imageUri; // ‡πÉ‡∏ä‡πâ local URI ‡πÅ‡∏ó‡∏ô
      }

      const bucketExists = buckets?.some(bucket => bucket.id === 'images');
      
      if (!bucketExists) {
        console.log("üö® Bucket 'images' ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡πÉ‡∏ä‡πâ local URI ‡πÅ‡∏ó‡∏ô");
        console.log("üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á bucket ‡πÉ‡∏ô Supabase Dashboard: Storage > Create bucket > name: 'images'");
        return imageUri;
      }

      const base64Data = await FileSystem.readAsStringAsync(imageUri, {
        encoding: FileSystem.EncodingType.Base64,
      });

      const fileExt = imageUri.split('.').pop() || 'jpg';
      const fileName = `snap_${Date.now()}.${fileExt}`;
      const filePath = `snap-images/${fileName}`;

      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase Storage
      const { data, error } = await supabase.storage
        .from('images')
        .upload(filePath, decodeBase64(base64Data), {
          contentType: `image/${fileExt}`,
          upsert: false
        });

      if (error) {
        console.log('‚ö†Ô∏è Upload error:', error.message);
        return imageUri; // ‡πÉ‡∏ä‡πâ local URI ‡πÅ‡∏ó‡∏ô
      }

      // ‡πÑ‡∏î‡πâ public URL
      const { data: { publicUrl } } = supabase.storage
        .from('images')
        .getPublicUrl(filePath);

      console.log("‚úÖ Upload ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", publicUrl);
      return publicUrl;

    } catch (error) {
      console.log('‚ö†Ô∏è Error in uploadImageToSupabase:', error);
      return imageUri; // fallback ‡πÉ‡∏ä‡πâ local URI
    }
  };

  // Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö decode base64
  const decodeBase64 = (base64: string) => {
    try {
      const base64Code = base64.split(',')[1] || base64;
      const chars = atob(base64Code);
      const bytes = new Uint8Array(chars.length);
      for (let i = 0; i < chars.length; i++) {
        bytes[i] = chars.charCodeAt(i);
      }
      return bytes;
    } catch (error) {
      console.error('Error decoding base64:', error);
      throw new Error('Failed to decode image');
    }
  };

  // ‚úÖ Function ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Gallery
  const requestGalleryPermission = async (): Promise<boolean> => {
    if (Platform.OS === 'ios') {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      return status === 'granted';
    }
    return true;
  };

  // ‚úÖ Function ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Gallery
  const handleGalleryPress = async () => {
    try {
      const hasPermission = await requestGalleryPermission();
      
      if (!hasPermission) {
        Alert.alert(
          "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á",
          "‡πÅ‡∏≠‡∏õ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Gallery ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
          [{ text: "‡∏ï‡∏Å‡∏•‡∏á" }]
        );
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
        base64: false,
      });

      if (!result.canceled && result.assets && result.assets.length > 0) {
        const imageUri = result.assets[0].uri;
        setSelectedImage(imageUri);
        setIsUsingGallery(true);
        console.log("‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Gallery:", imageUri);
      }
    } catch (error) {
      console.error("‚ùå Error picking image:", error);
      Alert.alert("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Gallery ‡πÑ‡∏î‡πâ");
    }
  };

  // ‚úÖ Function ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const handleClearSelectedImage = () => {
    setSelectedImage(null);
    setIsUsingGallery(false);
  };

  // ‚úÖ Function ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Gallery ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
  const handleAnalyzeFromGallery = async () => {
    if (!selectedImage) {
      Alert.alert("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    try {
      setIsLoading(true);
      console.log("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Gallery...");

      // ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á FastAPI
      const predictionResult = await analyzeImageWithFastAPI(selectedImage);

      // Navigate ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÉ‡∏ä‡πâ local URI)
      navigation.navigate("PredictionResult", {
        prediction: predictionResult,
        imageUri: selectedImage
      });

    } catch (error) {
      console.error("‚ùå Error in handleAnalyzeFromGallery:", error);
      Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ");
    } finally {
      setIsLoading(false);
    }
  };

  // üöÄ Function ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á FastAPI Backend
  const analyzeImageWithFastAPI = async (imageUri: string): Promise<any> => {
    try {
      console.log("üì° ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á FastAPI backend...");

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö React Native
      const formData = new FormData();
      
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö React Native ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
      const fileInfo = {
        uri: imageUri,
        type: 'image/jpeg',
        name: 'image.jpg',
      };
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ FormData
      formData.append('file', fileInfo as any);
      formData.append('user_id', CURRENT_USER_ID.toString());

      console.log("üîÑ Sending request to FastAPI...");

      // ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á FastAPI
      const response = await fetch(`${FASTAPI_URL}/api/predict`, {
        method: 'POST',
        body: formData,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`FastAPI Error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log("‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å FastAPI:", result);
      
      return result;

    } catch (error) {
      console.error('‚ùå Error in analyzeImageWithFastAPI:', error);
      
      // Development mode: ‡πÉ‡∏ä‡πâ mock data
      if (__DEV__) {
        console.log("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development");
        return getMockPredictionData();
      }
      
      throw error;
    }
  };

  // ‚úÖ Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development
  const getMockPredictionData = () => {
    const vegetables = [
      {
        name: "Bell Pepper",
        confidence: 0.95,
        description: "‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏¢‡∏ß‡∏Å‡∏°‡∏µ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏´‡∏ß‡∏≤‡∏ô ‡∏°‡∏µ‡πÄ‡∏ú‡πá‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢",
        thai_name: "‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏¢‡∏ß‡∏Å",
        recipes: ["‡∏¢‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏¢‡∏ß‡∏Å", "‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏¢‡∏ß‡∏Å‡∏¢‡∏±‡∏î‡πÑ‡∏™‡πâ", "‡∏ú‡∏±‡∏î‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏¢‡∏ß‡∏Å"]
      },
      {
        name: "Tomato", 
        confidence: 0.87,
        description: "‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏°‡∏µ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡∏≠‡∏°‡∏´‡∏ß‡∏≤‡∏ô",
        thai_name: "‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®",
        recipes: ["‡∏™‡∏•‡∏±‡∏î‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®", "‡∏ã‡∏∏‡∏õ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®", "‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏¢‡πà‡∏≤‡∏á"]
      },
      {
        name: "Cucumber",
        confidence: 0.78,
        description: "‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤‡∏°‡∏µ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô ‡∏Å‡∏£‡∏≠‡∏ö",
        thai_name: "‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤",
        recipes: ["‡∏¢‡∏≥‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤", "‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà", "‡∏ô‡πâ‡∏≥‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤‡∏õ‡∏±‡πà‡∏ô"]
      }
    ];

    const randomVeg = vegetables[Math.floor(Math.random() * vegetables.length)];
    
    return {
      success: true,
      predictions: [randomVeg],
      top_prediction: randomVeg,
      analyzed_at: new Date().toISOString(),
      model_version: "v1.0.0"
    };
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏î‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
  const handleSnapPress = async () => {
    if (!cameraRef.current || !cameraReady) {
      Alert.alert("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
      return;
    }

    try {
      setIsLoading(true);
      
      console.log("üì∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ...");
      
      const photo = await cameraRef.current.takePictureAsync({
        quality: 0.7,
        base64: false,
        skipProcessing: true
      });

      if (!photo) {
        throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ");
      }

      console.log("‚úÖ ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:", photo.uri);

      // ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á FastAPI
      const predictionResult = await analyzeImageWithFastAPI(photo.uri);
      
      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Supabase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö background)
      const imageUrl = await uploadImageToSupabase(photo.uri);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
      await saveAnalysisHistory(predictionResult, imageUrl);

      // Navigate ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      navigation.navigate("PredictionResult", {
        prediction: predictionResult,
        imageUri: imageUrl
      });

    } catch (error) {
      console.error("‚ùå Error in handleSnapPress:", error);
      Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ");
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ Function ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏á Supabase
  const saveAnalysisHistory = async (prediction: any, imageUrl: string) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á analysis_history ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const { error: checkError } = await supabase
        .from('analysis_history')
        .select('id')
        .limit(1);

      if (checkError && checkError.code === 'PGRST116') {
        console.log("üö® ‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'analysis_history' ‡πÑ‡∏°‡πà‡∏û‡∏ö");
        console.log("üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô Supabase SQL Editor:");
        console.log(`
CREATE TABLE public.analysis_history (
  id BIGSERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL,
  image_url TEXT NOT NULL,
  prediction_result JSONB NOT NULL,
  analyzed_at TIMESTAMPTZ DEFAULT NOW(),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS (Row Level Security)
ALTER TABLE public.analysis_history ENABLE ROW LEVEL SECURITY;

-- Create policy to allow all operations (adjust as needed)
CREATE POLICY "Allow all operations" ON public.analysis_history
  FOR ALL USING (true);
        `);
        return; // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      }

      const { error } = await supabase
        .from('analysis_history')
        .insert({
          user_id: CURRENT_USER_ID,
          image_url: imageUrl,
          prediction_result: prediction,
          analyzed_at: new Date().toISOString()
        });

      if (error) {
        console.log('‚ö†Ô∏è Error saving analysis history:', error.message);
      } else {
        console.log('‚úÖ Analysis history saved');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error in saveAnalysisHistory:', error);
    }
  };

  // Loading State
  if (!permission) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#4CAF50" />
        <Text style={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</Text>
      </View>
    );
  }

  // No Permission State
  if (!permission.granted) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#2E7D32" />
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <MaterialIcons name="arrow-back" size={24} color="#fff" />
          </TouchableOpacity>
          <View style={styles.headerTitleContainer}>
            <MaterialCommunityIcons name="camera" size={24} color="#fff" />
            <Text style={styles.headerTitle}>Snap & Identify</Text>
          </View>
          <View style={{ width: 40 }} />
        </View>

        <View style={styles.noPermissionContainer}>
          <MaterialCommunityIcons name="camera-off" size={80} color="#2E7D32" />
          <Text style={styles.noPermissionTitle}>
            ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á
          </Text>
          <Text style={styles.noPermissionText}>
            ‡πÅ‡∏≠‡∏õ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ{'\n'}
            ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
          </Text>
          <TouchableOpacity 
            style={styles.permissionButton}
            onPress={requestPermission}
          >
            <MaterialIcons name="camera" size={20} color="#fff" />
            <Text style={styles.permissionButtonText}>‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï</Text>
          </TouchableOpacity>
        </View>

        <Tabbar activeTab="snap" />
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#2E7D32" />

      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <MaterialIcons name="arrow-back" size={24} color="#fff" />
        </TouchableOpacity>
        <View style={styles.headerTitleContainer}>
          <MaterialCommunityIcons name="camera" size={24} color="#fff" />
          <Text style={styles.headerTitle}>Snap & Identify</Text>
        </View>
        <TouchableOpacity 
          style={[
            styles.galleryButton,
            isUsingGallery && styles.galleryButtonActive
          ]}
          onPress={handleGalleryPress}
        >
          <MaterialIcons 
            name="photo-library" 
            size={24} 
            color={isUsingGallery ? "#4CAF50" : "#fff"} 
          />
        </TouchableOpacity>
      </View>

      {/* Main Content */}
      <View style={styles.content}>
        {/* Camera Preview ‡∏´‡∏£‡∏∑‡∏≠ Gallery Image */}
        <View style={styles.cameraContainer}>
          {isUsingGallery && selectedImage ? (
            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Gallery
            <View style={styles.galleryPreview}>
              <Image 
                source={{ uri: selectedImage }} 
                style={styles.galleryImage}
                resizeMode="cover"
              />
              <TouchableOpacity 
                style={styles.clearImageButton}
                onPress={handleClearSelectedImage}
              >
                <MaterialIcons name="close" size={20} color="#fff" />
              </TouchableOpacity>
              
              {/* Overlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gallery Image */}
              <View style={styles.cameraOverlay}>
                <View style={styles.focusFrame}>
                  <View style={styles.cornerTL} />
                  <View style={styles.cornerTR} />
                  <View style={styles.cornerBL} />
                  <View style={styles.cornerBR} />
                </View>
                
                <View style={styles.instructionContainer}>
                  <MaterialCommunityIcons name="image" size={20} color="#fff" />
                  <Text style={styles.instructionText}>
                    ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Gallery
                  </Text>
                  <MaterialCommunityIcons name="image" size={20} color="#fff" />
                </View>
              </View>
            </View>
          ) : (
            // ‡πÅ‡∏™‡∏î‡∏á Camera Preview
            <>
              <CameraView 
                style={styles.cameraPreview} 
                facing="back"
                ref={cameraRef}
                onCameraReady={() => setCameraReady(true)}
              />
              
              {/* Camera Overlay */}
              <View style={styles.cameraOverlay}>
                <View style={styles.focusFrame}>
                  <View style={styles.cornerTL} />
                  <View style={styles.cornerTR} />
                  <View style={styles.cornerBL} />
                  <View style={styles.cornerBR} />
                </View>
                
                <View style={styles.instructionContainer}>
                  <MaterialCommunityIcons name="food-apple" size={20} color="#fff" />
                  <Text style={styles.instructionText}>
                    ‡∏ß‡∏≤‡∏á‡∏ú‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö
                  </Text>
                  <MaterialCommunityIcons name="food-apple" size={20} color="#fff" />
                </View>
              </View>
            </>
          )}
        </View>

        {/* Control Buttons */}
        <View style={styles.controlContainer}>
          {/* Snap/Analyze Button */}
          <TouchableOpacity 
            style={[
              styles.snapButton, 
              isLoading && styles.snapButtonDisabled,
              (!cameraReady && !isUsingGallery) && styles.snapButtonDisabled
            ]} 
            onPress={isUsingGallery ? handleAnalyzeFromGallery : handleSnapPress} 
            disabled={isLoading || (!cameraReady && !isUsingGallery)}
            activeOpacity={0.8}
          >
            <View style={styles.snapButtonContent}>
              {isLoading ? (
                <>
                  <ActivityIndicator color="#fff" size="small" />
                  <Text style={styles.snapButtonText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...</Text>
                </>
              ) : (
                <>
                  <MaterialCommunityIcons 
                    name={isUsingGallery ? "image-search" : (cameraReady ? "camera" : "camera-off")} 
                    size={24} 
                    color="#fff" 
                  />
                  <Text style={styles.snapButtonText}>
                    {isUsingGallery 
                      ? "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" 
                      : cameraReady 
                        ? "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ & ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå" 
                        : "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"
                    }
                  </Text>
                </>
              )}
            </View>
          </TouchableOpacity>

          {/* Helper Text */}
          <Text style={styles.helperText}>
            {isUsingGallery 
              ? "AI ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
              : "AI ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
            }
          </Text>

          {/* Debug Info */}
          {__DEV__ && (
            <View style={styles.debugInfo}>
              <Text style={styles.debugText}>
                üì∏ ‡∏Å‡∏•‡πâ‡∏≠‡∏á: {cameraReady ? '‡∏û‡∏£‡πâ‡∏≠‡∏°' : '‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'} | 
                üìÅ ‡πÇ‡∏´‡∏°‡∏î: {isUsingGallery ? 'Gallery' : 'Camera'} |
                üöÄ Backend: FastAPI
              </Text>
            </View>
          )}
        </View>
      </View>

      {/* Bottom Tab Bar */}
      <Tabbar activeTab="snap" />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    backgroundColor: "#2E7D32" 
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: "#2E7D32",
  },
  backButton: { 
    padding: 8,
    borderRadius: 20,
    backgroundColor: 'rgba(255,255,255,0.2)',
  },
  headerTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  headerTitle: { 
    fontSize: 18, 
    fontWeight: "600", 
    color: "#fff",
  },
  galleryButton: { 
    padding: 8,
    borderRadius: 20,
    backgroundColor: 'rgba(255,255,255,0.2)',
  },
  galleryButtonActive: {
    backgroundColor: 'rgba(255,255,255,0.4)',
  },
  content: {
    flex: 1,
    backgroundColor: '#A4E4A0',
  },
  cameraContainer: { 
    flex: 1, 
    margin: 20,
    borderRadius: 20, 
    overflow: "hidden",
    backgroundColor: '#000',
    position: 'relative',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  cameraPreview: { 
    flex: 1,
  },
  galleryPreview: {
    flex: 1,
    position: 'relative',
  },
  galleryImage: {
    width: '100%',
    height: '100%',
  },
  clearImageButton: {
    position: 'absolute',
    top: 12,
    right: 12,
    width: 36,
    height: 36,
    backgroundColor: 'rgba(0,0,0,0.7)',
    borderRadius: 18,
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 10,
  },
  cameraOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  focusFrame: {
    width: 280,
    height: 280,
    backgroundColor: 'transparent',
    position: 'relative',
  },
  cornerTL: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: 40,
    height: 40,
    borderTopWidth: 4,
    borderLeftWidth: 4,
    borderColor: '#4CAF50',
    borderRadius: 2,
  },
  cornerTR: {
    position: 'absolute',
    top: 0,
    right: 0,
    width: 40,
    height: 40,
    borderTopWidth: 4,
    borderRightWidth: 4,
    borderColor: '#4CAF50',
    borderRadius: 2,
  },
  cornerBL: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    width: 40,
    height: 40,
    borderBottomWidth: 4,
    borderLeftWidth: 4,
    borderColor: '#4CAF50',
    borderRadius: 2,
  },
  cornerBR: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    width: 40,
    height: 40,
    borderBottomWidth: 4,
    borderRightWidth: 4,
    borderColor: '#4CAF50',
    borderRadius: 2,
  },
  instructionContainer: {
    position: 'absolute',
    bottom: 30,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    backgroundColor: 'rgba(0,0,0,0.7)',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  instructionText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '500',
  },
  controlContainer: { 
    paddingHorizontal: 20, 
    paddingBottom: 20,
  },
  snapButton: {
    backgroundColor: "#4CAF50",
    borderRadius: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  snapButtonDisabled: {
    backgroundColor: "#CCCCCC",
  },
  snapButtonContent: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 16,
    gap: 8,
  },
  snapButtonText: { 
    color: "#fff", 
    fontSize: 16, 
    fontWeight: "600",
  },
  helperText: {
    textAlign: 'center',
    color: '#2E7D32',
    fontSize: 12,
    marginTop: 12,
    fontWeight: '500',
  },
  debugInfo: {
    marginTop: 8,
    padding: 8,
    backgroundColor: 'rgba(255,255,255,0.3)',
    borderRadius: 8,
  },
  debugText: {
    fontSize: 10,
    color: '#2E7D32',
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#A4E4A0',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#2E7D32',
    fontWeight: '500',
  },
  noPermissionContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#A4E4A0',
    paddingHorizontal: 40,
  },
  noPermissionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginTop: 20,
    textAlign: 'center',
  },
  noPermissionText: {
    fontSize: 14,
    color: '#2E7D32',
    marginTop: 12,
    textAlign: 'center',
    opacity: 0.8,
    lineHeight: 20,
  },
  permissionButton: {
    backgroundColor: '#4CAF50',
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 12,
    marginTop: 32,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
  permissionButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default SnapScreen;